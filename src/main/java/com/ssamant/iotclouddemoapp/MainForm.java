/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.ssamant.iotclouddemoapp;

import com.microsoft.azure.sdk.iot.provisioning.security.SecurityProviderSymmetricKey;
import com.ssamant.connectioninfo.ConnectionInfo;
import com.ssamant.dbservice.DBOperations;
import com.ssamant.utilities.CheckBoxWrapperTableModel;
import java.awt.Color;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.IOException;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Scanner;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JLabel;
import javax.swing.table.DefaultTableModel;
import javax.swing.JOptionPane;

/**
 *
 * @author Sunil
 */
public class MainForm extends javax.swing.JFrame {

    /**
     * Creates new form MainForm
     */
    public MainForm() {
        initComponents();
        ((JLabel) comboBoxMsgProtocols.getRenderer()).setHorizontalAlignment(JLabel.RIGHT);
        ((JLabel) comboBoxRegDevices.getRenderer()).setHorizontalAlignment(JLabel.RIGHT);
        populateAllDevices(); //populate existing IoT devices into combo box.
        populateTableWithdeviceIds();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        tabbedPaneMain = new javax.swing.JTabbedPane();
        jPanelConfigParams = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        txtFieldNumDevices = new javax.swing.JTextField();
        btnRegisterIoTDevice = new javax.swing.JButton();
        labelDeviceRegSuccess = new javax.swing.JLabel();
        jScrollPaneDeviceList = new javax.swing.JScrollPane();
        jTableDeviceList = new javax.swing.JTable();
        jLabel7 = new javax.swing.JLabel();
        txtFieldDeviceOwner = new javax.swing.JTextField();
        jPanel2 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        comboBoxMsgProtocols = new javax.swing.JComboBox<>();
        jLabel3 = new javax.swing.JLabel();
        txtFieldTelemFrequency = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        txtFieldMsgSize = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        txtFieldDuration = new javax.swing.JTextField();
        btnSendTelemetry = new javax.swing.JButton();
        btnStopSending = new javax.swing.JButton();
        jPanelImage = new javax.swing.JPanel();
        comboBoxRegDevices = new javax.swing.JComboBox<>();
        btnDeviceDeregister = new javax.swing.JButton();
        jPanelSendTelemetry = new javax.swing.JPanel();
        jPanelDeviceDetails = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tableDeviceInfo = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("IoT Device to Cloud Telemetry Demo [Azure cloud]");

        tabbedPaneMain.setAutoscrolls(true);
        tabbedPaneMain.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        jPanel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jLabel1.setText("No of devices to register (to IoT Hub):");

        txtFieldNumDevices.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        txtFieldNumDevices.setText("1");

        btnRegisterIoTDevice.setText("Register Device(s)");
        btnRegisterIoTDevice.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRegisterIoTDeviceActionPerformed(evt);
            }
        });

        jTableDeviceList.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Select", "Device ID", "Owner", "Active"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                true, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTableDeviceList.setShowGrid(true);
        jScrollPaneDeviceList.setViewportView(jTableDeviceList);
        if (jTableDeviceList.getColumnModel().getColumnCount() > 0) {
            jTableDeviceList.getColumnModel().getColumn(0).setResizable(false);
            jTableDeviceList.getColumnModel().getColumn(0).setPreferredWidth(2);
            jTableDeviceList.getColumnModel().getColumn(1).setPreferredWidth(140);
        }

        jLabel7.setText("Device owner:");

        txtFieldDeviceOwner.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        txtFieldDeviceOwner.setText("XYZ");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(24, 24, 24)
                        .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 174, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(53, 53, 53))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 227, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(txtFieldNumDevices, javax.swing.GroupLayout.DEFAULT_SIZE, 207, Short.MAX_VALUE)
                    .addComponent(txtFieldDeviceOwner))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(165, 165, 165)
                        .addComponent(labelDeviceRegSuccess, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addContainerGap())
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnRegisterIoTDevice, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
            .addComponent(jScrollPaneDeviceList)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(26, 26, 26)
                        .addComponent(labelDeviceRegSuccess))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtFieldNumDevices, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel7)
                            .addComponent(txtFieldDeviceOwner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnRegisterIoTDevice))))
                .addGap(25, 25, 25)
                .addComponent(jScrollPaneDeviceList, javax.swing.GroupLayout.DEFAULT_SIZE, 131, Short.MAX_VALUE))
        );

        jPanel2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jLabel2.setText("Messaging Protocol:");

        comboBoxMsgProtocols.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "MQTT", "AMQP", " " }));

        jLabel3.setText("Telemetry Send Interval:");

        txtFieldTelemFrequency.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        txtFieldTelemFrequency.setText("5000");

        jLabel4.setText("Message Size (per device in bytes):");

        txtFieldMsgSize.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        txtFieldMsgSize.setText("100");

        jLabel5.setText("Select device:");

        jLabel6.setText("Duration (in minutes):");

        txtFieldDuration.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        txtFieldDuration.setText("10");

        btnSendTelemetry.setText("Send Telemetry");
        btnSendTelemetry.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSendTelemetryActionPerformed(evt);
            }
        });

        btnStopSending.setText("Stop Sending");
        btnStopSending.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnStopSendingActionPerformed(evt);
            }
        });

        jPanelImage.setBackground(new java.awt.Color(204, 255, 255));

        javax.swing.GroupLayout jPanelImageLayout = new javax.swing.GroupLayout(jPanelImage);
        jPanelImage.setLayout(jPanelImageLayout);
        jPanelImageLayout.setHorizontalGroup(
            jPanelImageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 256, Short.MAX_VALUE)
        );
        jPanelImageLayout.setVerticalGroup(
            jPanelImageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 273, Short.MAX_VALUE)
        );

        comboBoxRegDevices.setAutoscrolls(true);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 218, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 198, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 198, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 218, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 178, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(34, 34, 34)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(txtFieldTelemFrequency)
                            .addComponent(txtFieldMsgSize)
                            .addComponent(comboBoxMsgProtocols, 0, 372, Short.MAX_VALUE)
                            .addComponent(txtFieldDuration)
                            .addComponent(btnSendTelemetry, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 208, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(comboBoxRegDevices, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addComponent(btnStopSending, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 208, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(68, 68, 68)
                .addComponent(jPanelImage, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jPanelImage, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel5)
                            .addComponent(comboBoxRegDevices, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(jLabel3)
                                .addGap(18, 18, 18)
                                .addComponent(jLabel4))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(txtFieldTelemFrequency, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(txtFieldMsgSize, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(comboBoxMsgProtocols, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtFieldDuration, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel6))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnSendTelemetry)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnStopSending)
                        .addGap(26, 26, 26)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        btnDeviceDeregister.setText("Deregister selected device(s)");
        btnDeviceDeregister.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeviceDeregisterActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanelConfigParamsLayout = new javax.swing.GroupLayout(jPanelConfigParams);
        jPanelConfigParams.setLayout(jPanelConfigParamsLayout);
        jPanelConfigParamsLayout.setHorizontalGroup(
            jPanelConfigParamsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelConfigParamsLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelConfigParamsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanelConfigParamsLayout.createSequentialGroup()
                        .addComponent(btnDeviceDeregister, javax.swing.GroupLayout.PREFERRED_SIZE, 207, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))))
        );
        jPanelConfigParamsLayout.setVerticalGroup(
            jPanelConfigParamsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelConfigParamsLayout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnDeviceDeregister)
                .addGap(15, 15, 15)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, 276, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        tabbedPaneMain.addTab("Register Device & Config Params", jPanelConfigParams);

        javax.swing.GroupLayout jPanelSendTelemetryLayout = new javax.swing.GroupLayout(jPanelSendTelemetry);
        jPanelSendTelemetry.setLayout(jPanelSendTelemetryLayout);
        jPanelSendTelemetryLayout.setHorizontalGroup(
            jPanelSendTelemetryLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 970, Short.MAX_VALUE)
        );
        jPanelSendTelemetryLayout.setVerticalGroup(
            jPanelSendTelemetryLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 543, Short.MAX_VALUE)
        );

        tabbedPaneMain.addTab("View Results", jPanelSendTelemetry);

        tableDeviceInfo.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Device ID", "Message Protocol", "Message Size", "Telemetry Interval"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, true, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tableDeviceInfo);

        javax.swing.GroupLayout jPanelDeviceDetailsLayout = new javax.swing.GroupLayout(jPanelDeviceDetails);
        jPanelDeviceDetails.setLayout(jPanelDeviceDetailsLayout);
        jPanelDeviceDetailsLayout.setHorizontalGroup(
            jPanelDeviceDetailsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelDeviceDetailsLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 950, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanelDeviceDetailsLayout.setVerticalGroup(
            jPanelDeviceDetailsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelDeviceDetailsLayout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        tabbedPaneMain.addTab("View Device Details", jPanelDeviceDetails);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(tabbedPaneMain))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(tabbedPaneMain)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * function to register device(s) to IoT Hub
     *
     * @param evt
     */
    private void btnRegisterIoTDeviceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRegisterIoTDeviceActionPerformed

        if (!"".equals(txtFieldNumDevices.getText().trim()) && !"".equals(txtFieldDeviceOwner.getText().trim())) {
            try {
                int numOfDevices = Integer.parseInt(txtFieldNumDevices.getText().trim());
                if (numOfDevices == 1) {
                    //call device reg method through DPS individual device enrollment passing the device owner info
                    ProvisioningIndividualEnrollment.beginIndividualDeviceRegistration(txtFieldDeviceOwner.getText().trim().toLowerCase());

                } else {
                    // bulk device registration - using Group Enrollment DPS service
                    for (int i = 0; i < numOfDevices; i++) {
                        ProvisioningGroupEnrollment.beginDeviceProvisioningUnderGroupEnrollment("-" + txtFieldDeviceOwner.getText().trim().toLowerCase() + "0" + String.valueOf(i), txtFieldDeviceOwner.getText().trim().toLowerCase());
                    }
                }
                labelDeviceRegSuccess.setText("Device(s) registered successfully!");
                this.comboBoxRegDevices.removeAllItems(); //clear all items before populating with updated device entries.
                populateAllDevices();
                DefaultTableModel model = (DefaultTableModel) jTableDeviceList.getModel();
                model.setRowCount(0);
                //tableModel.fireTableDataChanged();
                populateTableWithdeviceIds();

            } catch (NumberFormatException ex) {
                System.out.println(ex.getMessage());
            } catch (IOException ex) {
                Logger.getLogger(MainForm.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_btnRegisterIoTDeviceActionPerformed

    private void populateAllDevices() {
        ArrayList<String> devices = DBOperations.getAllDeviceIds();
        devices.forEach(dev -> {
            comboBoxRegDevices.addItem(dev);
        });
    }

    /**
     * Send device telemetry to cloud based on the configured parameters
     *
     * @param evt
     */
    private void btnSendTelemetryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSendTelemetryActionPerformed

        String deviceId = comboBoxRegDevices.getSelectedItem().toString();
        String transportProtocol = comboBoxMsgProtocols.getSelectedItem().toString();
        String telemInterval = txtFieldTelemFrequency.getText().trim();
        String msgSize = txtFieldMsgSize.getText().trim();
        int duration = Integer.parseInt(txtFieldDuration.getText().trim());

        Device device = new Device();
        device.setMessageSize(msgSize);
        device.setDeviceId(deviceId);
        device.setProtocol(transportProtocol);
        device.setTelemInterval(telemInterval);

        DeviceTelemetryService.sendDeviceTelemetryToCloud(device, duration);
        System.out.println("Start sending telemetry to cloud...");

        CheckBoxWrapperTableModel model = (CheckBoxWrapperTableModel) jTableDeviceList.getModel();
        model.setRowCount(0);
        populateTableWithdeviceIds();
    }//GEN-LAST:event_btnSendTelemetryActionPerformed

    private void btnStopSendingActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnStopSendingActionPerformed
        DeviceTelemetryService.stopSendindTelemetry(comboBoxRegDevices.getSelectedItem().toString());
        CheckBoxWrapperTableModel model = (CheckBoxWrapperTableModel) jTableDeviceList.getModel();
        model.setRowCount(0);
        populateTableWithdeviceIds();
    }//GEN-LAST:event_btnStopSendingActionPerformed

    private void btnDeviceDeregisterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeviceDeregisterActionPerformed


    }//GEN-LAST:event_btnDeviceDeregisterActionPerformed

    /**
     * function to populate the device info into table as well as deleting the
     * selected devices from the table.
     */
    private void populateTableWithdeviceIds() {

        ResultSet rs = DBOperations.getAllDevices();

        int columnCount = jTableDeviceList.getColumnCount();
        Vector<Vector<Object>> data = new Vector<>();
        Vector<String> columns = new Vector<>();

        for (int column = 0; column < columnCount; column++) {
            columns.add(jTableDeviceList.getColumnName(column));
        }
        jTableDeviceList.setAutoCreateColumnsFromModel(false);
        DefaultTableModel tableModel = new DefaultTableModel(data, columns);
        //jTableDeviceList.setModel(tableModel);

        try {
            while (rs.next()) {
                Vector<String> newRow = new Vector<>();
                for (int columnIndex = 1; columnIndex <= columnCount - 1; columnIndex++) {
                    if ("t".equals(rs.getString(columnIndex))) {
                        String status = "true";
                        newRow.add(status);
                    } else if ("f".equals(rs.getString(columnIndex))) {
                        String status = "false";
                        newRow.add(status);
                    } else {
                        newRow.add(rs.getString(columnIndex));
                    }
                }

                tableModel.addRow(newRow);
            }

            CheckBoxWrapperTableModel wrapperModel = new CheckBoxWrapperTableModel(tableModel, "Select");
            jTableDeviceList.setModel(wrapperModel);

            //code block to remove the selected rows from the table whenever one or more rows are selected and deregister button is clicked.
            btnDeviceDeregister.addActionListener((ActionEvent e) -> {
                for (int i = jTableDeviceList.getRowCount() - 1; i >= 0; i--) {
                    Boolean selected = (Boolean) jTableDeviceList.getValueAt(i, 0);
                    System.out.println(selected + " : " + i);

                    if (selected) {
                        int option = JOptionPane.showConfirmDialog(null, "Are you sure de-registering the selected devices?", "CONFIRM MESSAGE", JOptionPane.YES_NO_OPTION);
                        if (option == JOptionPane.YES_OPTION) {
                            String deviceId = (String) jTableDeviceList.getValueAt(i, 1);
                            System.out.println("selected deviceId: " + deviceId);
                            wrapperModel.removeRow(i);
                            //add code to deregister devices from IoT Hub and update database.
                            DBOperations.deRegisterDevice(deviceId);

                        } else {
                            //simply return
                        }
                    }
                }
            });

        } catch (SQLException ex) {
            System.out.println(ex.getMessage());
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;

                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainForm.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainForm.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainForm.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainForm.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new MainForm().setVisible(true);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnDeviceDeregister;
    public javax.swing.JButton btnRegisterIoTDevice;
    private javax.swing.JButton btnSendTelemetry;
    public javax.swing.JButton btnStopSending;
    private javax.swing.JComboBox<String> comboBoxMsgProtocols;
    private javax.swing.JComboBox<String> comboBoxRegDevices;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    public javax.swing.JPanel jPanelConfigParams;
    public javax.swing.JPanel jPanelDeviceDetails;
    private javax.swing.JPanel jPanelImage;
    public javax.swing.JPanel jPanelSendTelemetry;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPaneDeviceList;
    private javax.swing.JTable jTableDeviceList;
    public javax.swing.JLabel labelDeviceRegSuccess;
    private javax.swing.JTabbedPane tabbedPaneMain;
    private javax.swing.JTable tableDeviceInfo;
    private javax.swing.JTextField txtFieldDeviceOwner;
    private javax.swing.JTextField txtFieldDuration;
    private javax.swing.JTextField txtFieldMsgSize;
    private javax.swing.JTextField txtFieldNumDevices;
    private javax.swing.JTextField txtFieldTelemFrequency;
    // End of variables declaration//GEN-END:variables
}
